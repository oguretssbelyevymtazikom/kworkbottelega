from yookassa import Payment
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from .app import bot, dp, scheduler, REF_GIFT_DAYS, REF_ULTRA_GIFT_DAYS
from .utils import get_sub_price, create_payment, compose_menu_text, send_message
from models import user, payment, referral
from .markup import markup


async def check_payment(user_id: int, payment_id: str, call: CallbackQuery):
    try:
        PaymentResponse = Payment.find_one(payment_id)

        if PaymentResponse.status == 'succeeded':
            scheduler.remove_job(PaymentResponse.id)
            PaymentModel = payment.complete(PaymentResponse.id)

            user.add_sub(user_id, PaymentModel.amount)

            Referral = referral.get(user_id)
            if Referral:
                Referral = referral.activate(user_id)
                ReferrerActiveReferrals = referral.get_all_active_by_owner(Referral.referrer_id)
                referrals_count = len(ReferrerActiveReferrals)

                referrer_gift_days = 0
                
                if referrals_count and int(str(referrals_count)[-1:]) == 0:
                    referrer_gift_days = REF_ULTRA_GIFT_DAYS
                else:
                    referrer_gift_days = REF_GIFT_DAYS

                user.add_sub(Referral.referrer_id, referrer_gift_days)

                await bot.send_message(
                    chat_id=Referral.referrer_id,
                    text=f'üíé –í—ã –ø–æ–ª—É—á–∏–ª +{referrer_gift_days} –¥. –ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.',
                    reply_markup=markup.delete_call(Referral.referrer_id, '–û—Ç–ª–∏—á–Ω–æ!')
                )

            await call.message.edit_text(
                text=compose_menu_text(user_id),
                reply_markup=markup.menu(user_id)
            )

            await bot.send_message(
                chat_id=user_id,
                text=f'üíé –ü–æ–ª—É—á–µ–Ω–æ +{PaymentModel.amount} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏!',
                reply_markup=markup.delete_call(user_id, '–û—Ç–ª–∏—á–Ω–æ!')
            )

    except Exception as ex:
        scheduler.remove_job(PaymentResponse.id)
        print(ex)


@dp.callback_query_handler(text_startswith='payment')
async def callback_handler(call: CallbackQuery):
    user_id = call.from_user.id
    user.mark(user_id)

    if 'payment.pay.' in call.data:
        try:
            sub_days = int(call.data.split('.')[2])
            sub_price = get_sub_price(user_id, sub_days)

            PaymentResponse = create_payment(user_id, sub_price, f'Kwork Notifier | {sub_days} –¥. –ø–æ–¥–ø–∏—Å–∫–∏')

            payment.create(user_id, PaymentResponse.id, sub_days, sub_price)

            payment_markup = InlineKeyboardMarkup()
            payment_markup.row(
                InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'subs'),
                InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=PaymentResponse.confirmation.confirmation_url)
            )

            await call.message.edit_text(
                text=f'üíé <b>–û–ø–ª–∞—Ç–∞ +{sub_days} –¥. –ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞ {sub_price} —Ä—É–±.</b>\n\n'
                     f'–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç YOOKASSA. '
                     f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n\n'
                     f'–ß–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º.',
                reply_markup=payment_markup
            )

            scheduler.add_job(check_payment, 'interval', id=PaymentResponse.id, seconds=1, kwargs={'user_id': user_id, 'payment_id': PaymentResponse.id, 'call': call})

        except Exception as ex:
            await call.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∞. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è.', show_alert=True)
            print(ex)

    await call.answer()
