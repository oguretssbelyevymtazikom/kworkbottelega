import re
from aiogram.types import CallbackQuery, Message, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot.app import dp, BLACKLIST_LIMIT
from bot.markup import markup
from models import user, blacklist


class WorkTime(StatesGroup):
    call_msg: Message = State()
    work_time: str = State()


class TemplateState(StatesGroup):
    call_msg: Message = State()
    text: str = State()


def compose_settings_text(user_id: int, User: user.UserModel):
    user_work_time = User.work_time if User.work_time else '24 —á–∞—Å–∞'
    user_busy = '–ó–∞–Ω—è—Ç' if User.busy else '–°–≤–æ–±–æ–¥–µ–Ω'
    user_weekends = '–ù–µ—Ç'
    user_blacklist_length = len(blacklist.get_all_by_owner(user_id))
    user_template_is_default = user.template_is_default(user_id)

    if User.weekends != '0':
        user_weekends = ''
        weekend_days = ['', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']

        for i in range(7):
            i = i+1
            if str(i) in User.weekends:
                if not user_weekends:
                    user_weekends += weekend_days[i]
                    continue

                user_weekends += f', {weekend_days[i]}'

    text = f'<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n' \
           f'‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>{user_busy}</b>\n' \
           f'‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: <b>{user_work_time}</b>\n' \
           f'‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏: <b>{user_weekends}</b>\n' \
           f'‚Ä¢ –í —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: <b>{user_blacklist_length} / {BLACKLIST_LIMIT}</b>\n' \
           f'‚Ä¢ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" if user_template_is_default else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"}</b>'

    return text


def compose_template_text(User: user.UserModel, toggler: int):
    text = ''
    if toggler:
        text = f'<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n' \
               f'–ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç –±–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å, –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞.\n\n' \
               f'<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:</b>\n' \
               f'‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏: <code>[link_name]</code>\n' \
               f'‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: <code>[title]</code>\n' \
               f'‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: <code>[desc]</code>\n' \
               f'‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>[cat]</code>\n' \
               f'‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>[parent_cat]</code>\n' \
               f'‚Ä¢ –ë—é–¥–∂–µ—Ç: <code>[budget]</code>\n' \
               f'‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º—ã–π –±—é–¥–∂–µ—Ç: <code>[accept_budget]</code>\n' \
               f'‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–π–¥–∏): <code>[user]</code>\n' \
               f'‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>[user_link]</code>\n' \
               f'‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–º–∞: <code>[hired]</code>\n' \
               f'‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>[offers]</code>\n' \
               f'‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>[active_offers]</code>\n\n' \
               f'‚Ä¢ –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.\n' \
               f'‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ç–µ–≥–∏.\n\n' \
               f'üî∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω:'
        
    else:
        text = f'*–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n' \
               f'–ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç –±–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å, –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞\\.\n\n' \
               f'*–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω:*\n`{User.template}`\n\n' \
               f'‚Ä¢ –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤\\.\n' \
               f'‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ç–µ–≥–∏\\.\n\n' \
               f'üî∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω:'
        
    return text


@dp.callback_query_handler(text_startswith='settings', state='*')
async def callback_handler(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    User = user.mark(user_id)

    if call.data == 'settings':
        if state:
            await state.finish()

        await call.message.edit_text(
            text=compose_settings_text(user_id, User),
            disable_web_page_preview=True,
            reply_markup=markup.settings(user_id, User)
        )

    elif call.data == 'settings.busy':
        User = user.toggle_busy(user_id)
        await call.answer('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ' if User.busy else '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ')
        await call.message.edit_text(
            text=compose_settings_text(user_id, User),
            disable_web_page_preview=True,
            reply_markup=markup.settings(user_id, User)
        )

    elif call.data == 'settings.set_work_time':
        await WorkTime.call_msg.set()
        async with state.proxy() as data:
            data['call_msg'] = call.message
            await WorkTime.next()

        await call.message.edit_text(
            text=f'<b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n'
                 f'–°–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. '
                 f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –≤—ã <b>—Ö–æ—Ç–∏—Ç–µ</b> '
                 f'–ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.\n\n'
                 f'‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n'
                 f'‚Ä¢ –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è <b>8:00 - 19:35</b> (–û–¢ –∏ –î–û).\n'
                 f'‚Ä¢ –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>0</b> (–Ω–æ–ª—å)\n\n'
                 f'üî∏ –£–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:',
            disable_web_page_preview=True,
            reply_markup=markup.settings_back(user_id)
        )

    elif 'settings.template' in call.data:
        if call.data == 'settings.template':
            if not await state.get_state():
                await TemplateState.call_msg.set()
                async with state.proxy() as data:
                    data['call_msg'] = call.message
                    await TemplateState.next()

            await call.message.edit_text(
                text=compose_template_text(User, 0),
                disable_web_page_preview=True,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=markup.settings_template(user_id, 0)
            )

        elif call.data == 'settings.template.tags':
            await call.message.edit_text(
                text=compose_template_text(User, 1),
                disable_web_page_preview=True,
                reply_markup=markup.settings_template(user_id, 1)
            )

        elif call.data == 'settings.template.remove':
            if User.template != user.remove_tamplate(user_id):
                await call.answer('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω')
                await call.message.edit_text(
                    text=compose_template_text(User, 0),
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=markup.settings_template(user_id, 0)
                )

            await call.answer('–í—ã –µ—â—ë –Ω–µ –∏–∑–º–µ–Ω—è–ª–∏ —à–∞–±–ª–æ–Ω')

    elif 'settings.set_weekends' in call.data:
        if 'settings.set_weekends.' in call.data:
            weekend_day = call.data.split('.')[2]
            User = user.weekend(user_id, weekend_day)

        await call.message.edit_text(
            text=f'<b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π</b>\n\n'
                 f'–°–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö <b>–Ω–µ –±—É–¥—É—Ç</b> –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏.',
            disable_web_page_preview=True,
            reply_markup=markup.weekends(user_id, User)
        )

    await call.answer()


@dp.message_handler(state=WorkTime.work_time)
async def state_url(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    User = user.mark(user_id)

    if msg.text == '0':
        user.set_work_time(user_id, None)
        async with state.proxy() as data:
            await data['call_msg'].edit_text(
                text=compose_settings_text(user_id, User),
                disable_web_page_preview=True,
                reply_markup=markup.settings(user_id, User)
            )

            await state.finish()
            await msg.delete()

        return False

    if not re.match(r'^[\d]{1,2}\:[\d]{1,2}\-[\d]{1,2}\:[\d]{1,2}$', msg.text.replace(' ', '')):
        await msg.delete()
        return False

    async with state.proxy() as data:
        data['work_time'] = msg.text
        user.set_work_time(user_id, data['work_time'])

        await data['call_msg'].edit_text(
            text=compose_settings_text(user_id, User),
            disable_web_page_preview=True,
            reply_markup=markup.settings(user_id, User)
        )

        await state.finish()

    await msg.delete()


@dp.message_handler(state=TemplateState.text)
async def message_handler(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    User = user.mark(user_id)

    template_text = msg.text.strip()

    if len(template_text) > 500:
        await msg.delete()
        return False
    
    if template_text == User.template:
        await msg.delete()
        return False

    async with state.proxy() as data:
        data['text'] = template_text
        user.set_tamplate(user_id, template_text)

        await data['call_msg'].edit_text(
            text=compose_template_text(User, 0),
            disable_web_page_preview=True,
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=markup.settings_template(user_id, 0)
        )

    await msg.delete()
