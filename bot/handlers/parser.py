from datetime import datetime
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot.app import dp, PARSER_LINKS_LIMIT, get_datetime
from bot.markup import markup
from models import user, link


class ParseLink(StatesGroup):
    call_msg = State()
    name = State()
    url = State()


def compose_parser_text(user_id: int):
    text = f'<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞</b>\n\n' \
           f'1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="https://kwork.ru/projects?c=all">—Å—Å—ã–ª–∫–µ</a>.\n' \
           f'2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.\n' \
           f'3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.\n' \
           f'4. –î–æ–±–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –≤ –±–æ—Ç–∞.\n\n' \
           f'–ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ —Ä—É–±—Ä–∏–∫–∏ "–õ—é–±–∏–º—ã–µ", –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä—É–±—Ä–∏–∫—É "–í—Å–µ".\n\n' \
           f'–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ª—é–±—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    
    return text


def validate_url(user_id: int, url: str) -> bool:
    url = url.strip()

    if len(url) >= 500:
        return False

    if 'https://kwork.ru/projects' not in url[:25]:
        return False
    
    if link.get_by_owner_url(user_id, url):
        return False 
    
    return True


def validate_name(user_id: int, name: str) -> bool:
    if len(name.encode()) > 32:
        return False
    
    if link.get_by_owner_name(user_id, name):
        return False
    
    return True


@dp.message_handler(state=ParseLink.name)
async def state_url(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    user.mark(user_id)

    if not validate_name(user_id, msg.text):
        await msg.delete()
        return False

    async with state.proxy() as data:
        data['name'] = msg.text
        await data['call_msg'].edit_text(
            text=f'<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏</b>\n\n'
                 f'<b>–°—Å—ã–ª–∫—É</b> –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ, '
                 f'–ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ë–∏—Ä–∂–∞", —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, '
                 f'–∞ –∑–∞—Ç–µ–º, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞.\n\n'
                 f'‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.\n'
                 f'‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://kwork.ru/projects\n'
                 f'‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ —Ä—É–±—Ä–∏–∫–∏ "–õ—é–±–∏–º—ã–µ".\n\n'
                 f'üî∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:',
            disable_web_page_preview=True,
            reply_markup=markup.parser_add(user_id)
        )

        await ParseLink.next()

    await msg.delete()


@dp.message_handler(state=ParseLink.url)
async def state_url(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    user.mark(user_id)

    if not validate_url(user_id, msg.text):
        await msg.delete()
        return False

    async with state.proxy() as data:
        data['url'] = msg.text

        link.create(user_id, data['name'], data['url'])

        await data['call_msg'].edit_text(
            text=compose_parser_text(user_id),
            disable_web_page_preview=True,
            reply_markup=markup.parser(user_id)
        )

        await state.finish()

    await msg.delete()
    

@dp.callback_query_handler(text_startswith='parser', state='*')
async def callback_handler(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    user.mark(user_id)

    if call.data == 'parser':
        if state:
            await state.finish()

        try:
            await call.message.edit_text(
                text=compose_parser_text(user_id),
                disable_web_page_preview=True,
                reply_markup=markup.parser(user_id)
            )
        except:
            pass

    elif call.data == 'parser.add':
        Links = link.get_all_by_owner(user_id)
        if len(Links) >= PARSER_LINKS_LIMIT:
            return await call.answer(
                text=f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ üò¢',
                show_alert=True
            )

        await ParseLink.call_msg.set()
        async with state.proxy() as data:
            data['call_msg'] = call.message
            await ParseLink.next()

        await call.message.edit_text(
            text=f'<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏</b>\n\n'
                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> —Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å. '
                 f'–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥—É–º–∞—Ç—å —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–Ω–∏–º–∞—Ç—å, '
                 f'–∑–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–≤–µ—á–∞–µ—Ç —ç—Ç–∞ —Å—Å—ã–ª–∫–∞.\n\n'
                 f'‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.\n\n'
                 f'üî∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å—Å—ã–ª–∫–∏:',
            disable_web_page_preview=True,
            reply_markup=markup.parser_add(user_id)
        )

    elif 'parser.link.toggle.' in call.data:
        link_id = int(call.data.split('.')[3])
        Link = link.toggle(link_id)
        link_date = get_datetime(Link.creation_time)
        link_date_format = datetime.strftime(link_date, '%Y.%m.%d - %H:%M:%S')

        await call.message.edit_text(
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{Link.name}</b>\n'
                 f'–°—Å—ã–ª–∫–∞: <b>{Link.url}</b>\n'
                 f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{link_date_format}</b>\n',
            disable_web_page_preview=True,
            reply_markup=markup.parser_link(link_id)
        )

    elif 'parser.link.delete.' in call.data:
        link_id = int(call.data.split('.')[3])
        link.delete(link_id)

        await call.message.edit_text(
            text=compose_parser_text(user_id),
            disable_web_page_preview=True,
            reply_markup=markup.parser(user_id)
        )

    elif 'parser.link.id.' in call.data:
        link_id = int(call.data.split('.')[3])
        Link = link.get(link_id)
        link_date = get_datetime(Link.creation_time)
        link_date_format = datetime.strftime(link_date, '%Y.%m.%d - %H:%M:%S')

        await call.message.edit_text(
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{Link.name}</b>\n'
                 f'–°—Å—ã–ª–∫–∞: <b>{Link.url}</b>\n'
                 f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{link_date_format}</b>\n',
            disable_web_page_preview=True,
            reply_markup=markup.parser_link(link_id)
        )
    
    await call.answer()
